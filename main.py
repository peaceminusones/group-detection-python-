import numpy as np
import json 
import random
from loadData import loadData
from loadPreTrained import loadPreTrained
from getFeatureFromWindow import getFeatureFromWindow
from getClustersFromWindow import getClustersFromWindow
from loadfeature import loadfeature
from MyEncoder import MyEncoder
from trainBCFW import trainBCFW
# from train import trainBCFW
from trainPerceptron import trainPerceptron
from test import test_struct_svm
from showCluster import showCluster

import os
os.environ["CUDA_VISIBLE_DEVICES"] = "0"

dataDirectory = "mydata/student003"

class model_par:
    display = True
    window_size = 1
    trainingSetSize = 200
    testingSetSize = 200 - trainingSetSize
    features = [1, 1, 1, 1]
    numberOfFeatures = sum(features)

class model:
    feature_extraction = True
    trainMe = True
    preTrain_w = []
    testMe = True

if __name__ == "__main__":
    """
    initialize, load weight and data -----------------------------------------------------
    """
    # model.preTrain_w = loadPreTrained(model.trainMe, model_par.features, dataDirectory)
    # load data
    [myF, clusters, video_par] = loadData("load from file", dataDirectory)
    print("video_par: \n" ,video_par)
    """
    feature extraction -------------------------------------------------------------------
    """
    index_start = 0
    index_end = 0
    # test_starting_index = 0
    if model.feature_extraction or not(os.path.exists(dataDirectory + "/featureX.json") and os.path.exists(dataDirectory + "/featureY.json")):
        X = dict()   # input data
        Y = dict()   # ground truth info

        print("\nExtracting features: 0%")

        for i in range(model_par.trainingSetSize + model_par.testingSetSize):

            # window_size = 10s, 需要把10s内所有帧的数组提出来，所以需要得到第10s最后一帧的索引
            while (index_end <= myF.shape[0]) and (myF.iloc[index_end, 0] <= (myF.iloc[index_start, 0] + model_par.window_size * video_par['frame_rate'])):
                index_end = index_end + 1
            print("index start: ", index_start," ---> index end: ", index_end)

            # for this window, compute features
            allinformation = getFeatureFromWindow(myF, index_start, index_end, video_par, model_par)
            # print(allinformation)
            X[i] = {'trackid': allinformation[0], 'F': allinformation[1].tolist(), 'couples': allinformation[2], 'myfeatures': allinformation[3].tolist(), 'detectedGroups': allinformation[4]}

            # for this window, retrieve the cluster (so we can use them in the training)
            Y[i] = getClustersFromWindow(X[i]['trackid'], dataDirectory)

            # 移动窗口
            index_start = index_end + 1
            index_end = index_start

            print("Extracting features: " + str(round((i+1) / (model_par.trainingSetSize + model_par.testingSetSize) * 100)) + "%")

        # 把input data和output data保存为json数据格式！
        with open(dataDirectory + '/featureX.json', 'w') as f:
            json.dump(X, f, cls=MyEncoder, indent=4, separators=(',',':'))
        with open(dataDirectory + '/featureY.json', 'w') as f:
            json.dump(Y, f, cls=MyEncoder, indent=4, separators=(',',':'))

    else:
        print("Extraction from featureX")
        # 直接从文件中提取特征
        with open(dataDirectory + '/featureX.json', 'r') as f:
            X1 = json.load(f)
        print("Extraction from featureY")
        with open(dataDirectory + '/featureY.json', 'r') as f:
            Y = json.load(f)
        X, _ = loadfeature(dataDirectory,"student003.mat")
        print("done!\n")
        for i in range(len(X)):
            X[i]['trackid'] = X1[str(i)]['trackid']
            X[i]['couples'] = X1[str(i)]['couples']
            X[i]['detectedGroups'] = X1[str(i)]['detectedGroups']
            # print("1:",1 - X[i]['myfeatures'][:,1])
            # print("2:",np.array(X1[str(i)]['myfeatures'])[:,1])
            # X[i]['myfeatures'][:,1] = np.array(X1[str(i)]['myfeatures'])[:,1]

        # Y = {'0':[[[11], [10], [12], [13]], [[75], [76]], [[213], [214], [215], [216]], [[217], [219], [220]], [[7], [8]], [[21], [22]], [[9], [273]], [[14], [16]], [[19], [20]], [[27], [29]], [[28], [30]],[[77], [78]], [1], [2], [3], [4], [5], [6], [15], [17], [18], [23], [24], [25], [26], [31], [73], [74], [218], [274], [409]],
        #      '1':[[[217], [219], [220]], [[7], [8]], [[10], [11], [12], [13]], [[31], [32]], [[14], [16]], [[28], [30]], [[419], [420]], [[27], [29]], [[19], [20]], [[80], [81]], [[33], [34]], [[35], [36]], [[77], [78]], [[4], [75]], [3], [5], [9], [17], [23], [24], [25], [26], [37], [73], [74], [76], [79], [82], [83], [315], [410], [411]],
        #      '2':[[[10], [11], [12], [13]], [[217], [220], [219]], [[28], [30]], [[19], [20]], [[27], [29]], [[4], [75]], [[33], [34]], [[80], [81]], [[77], [78]], [[35], [36]], [[82], [84], [85]], [[300], [301]], [[38], [39]], [[303], [304]],  [[40], [302]], [[232], [233]], [[44], [45]], [37], [41], [42], [43], [74], [76], [79], [83], [86], [87], [221], [222], [223], [234], [305], [315], [316], [317], [410], [411]],
        #      '3':[[[232], [233]], [[217], [219], [220]], [[38], [39]], [[300], [301]], [[45], [46], [47]], [[82], [84], [85]], [[48], [49]], [[222], [340]], [[306], [307]], [[302], [303], [304]], [[223], [224], [226]], [[89], [90]], [[318], [319]], [[229], [230]], [[4], [75]], [[308], [309]], [37], [40], [41], [42], [43], [44], [50], [51], [80], [83], [86], [87], [88], [91], [92], [93], [221], [225], [227], [228], [235], [275], [312], [316], [317], [341], [410], [411]],
        #      '4':[[[232], [233]], [[229], [230]], [[94], [95]], [[38], [39]], [[300], [301]], [[318], [319]], [[89], [90]], [[45], [46], [47]], [[48], [49]], [[52], [53]], [[55], [56]], [[222], [340], [343]], [[223], [226], [224]], [[94], [95]], [[4], [75]], [[308], [309]], [42], [44], [50], [51], [54], [57], [83], [87], [88], [91], [92], [93], [96], [221], [225], [227], [228], [231], [234], [235], [310], [311], [312], [313], [316], [317], [341], [342], [344], [376]],
        #      '5':[[[98], [99]], [[45], [46], [47]], [[52], [53]], [[55], [56]], [[232], [233]], [[94], [95]], [[222], [340], [343]], [[89], [90]], [[58], [59]], [[60], [61]], [50], [51], [54], [57], [72], [87], [92], [96], [97], [93], [100], [101], [102], [225], [228], [229], [230], [231], [311], [313], [341], [342], [344], [376], [412]],
        #      '6':[[[412], [413], [414]], [[58], [59]], [[98], [99]], [[55], [56]], [[60], [61]], [[62], [63]], [[64], [65], [66]], [[222], [340], [343]], [[345], [346]], [[232], [233]], [[421], [422], [423]], [[72], [103]], [[68], [69]], [[236], [237]], [[348], [349]], [51], [57], [67], [96], [100], [101], [102], [104], [231], [347], [376], [424], [425], [426]],
        #      '7':[[[72], [103]], [[421], [422], [423], [426]], [[62], [63]], [[106], [107]], [[108], [109]], [[222], [340], [343]], [[64], [65], [66]], [[70], [71]], [[68], [69]], [[98], [99]], [[232], [233]], [[345], [346]], [[240], [241]], [[111], [112]], [[350], [351], [352], [353]], [51], [67], [104], [105], [110], [113], [236], [237], [238], [239], [242], [243], [276], [314], [320], [347], [376], [413], [424], [425]],
        #      '8':[[[422], [421], [423], [426]], [[244], [245]], [[236], [237]], [[70], [71]], [[64], [65], [66]], [[106], [107]], [[111], [112]], [[232], [233], [238]], [[108], [109]], [[345], [346]], [[115], [114], [116], [117]], [[118], [119]], [[350], [352], [351], [353]], [[246], [247]], [[120], [121]], [[378], [379]], [[428], [429]],  [67], [72], [103], [104], [110], [113], [122], [123], [124], [242], [243], [320], [321], [322], [323], [376], [377], [425], [427]],
        #      '9':[[[246], [247]], [[114], [115], [116], [117]], [[121], [123]], [[244], [245]], [[125], [126]], [[232], [233], [238]], [[127], [128]], [[130], [133], [132]], [[380], [381], [382], [383]], [[251], [252]], [[248], [249]], [[137], [138]], [[324], [325]], [[378], [379]], [[118], [119]], [72], [103], [110], [120], [122], [124], [129], [131], [134], [135], [136], [139], [243], [250], [321], [322], [323], [376], [377], [384], [385], [386]],
        #      '10':[[[115], [116]], [[253], [254]], [[121], [123]], [[127], [128]], [[130], [133], [132]], [[324], [325]], [[248], [249]], [[246], [247]], [[125], [126]], [[140], [141]], [[232], [233]], [[137], [138]], [[244], [245]], [[382], [383]], [[251], [252]], [[257], [258]], [[143], [144]], [122], [124], [129], [131], [134], [135], [136], [139], [142], [238], [243], [250], [255], [256], [277], [321], [322], [323], [326], [327], [376], [384], [386]],
        #      '11':[[[137], [138]], [[140], [141]], [[121], [123]], [[324], [325]], [[253], [254]], [[130], [132], [133]], [[127], [128]], [[232], [233]], [[248], [249]], [[144], [277]], [[146], [147]], [[148], [149]], [[356], [357]], [129], [134], [142], [143], [145],  [238], [256], [257], [258], [259], [326], [327], [328], [354], [355], [376], [386], [387]],
        #      '12':[[[146], [147]], [[148], [149]], [[324], [325]], [[354], [355]], [[232], [233]], [[150], [151]], [[330], [331], [332]], [[390], [391], [392]], [[152], [153], [154]], [[248], [249]], [[356], [357]], [[156], [157]], [[387], [388]], [[326], [327]], [142], [143], [144], [145], [155], [238], [254], [256], [259], [260], [261], [277], [328], [329], [376], [389], [393]],
        #      '13':[[[415], [416]], [[152], [153], [154]], [[150], [151]], [[329], [332], [331]], [[156], [158]], [[248], [249]], [[354], [355]], [[391], [392]], [[233], [232], [238]], [[393], [394], [395]], [[162], [163], [164]], [142], [155], [157], [159], [160], [161], [256], [259], [260], [261], [330], [334], [358], [359], [376], [396], [397]],
        #      '14':[[[165], [166], [167]], [[162], [163], [164]], [[248], [249]], [[156], [158]], [[329], [331], [332]], [[278], [279], [280], [281]], [[360], [361]], [142], [155], [159], [160], [161], [168], [169], [170], [256], [259], [260], [262], [282], [333], [334], [335], [336], [358], [359], [393], [396], [397], [398], [399]],
        #      '15':[[[171], [172]], [[329], [331], [332]], [[165], [167], [166]], [[335], [336]], [[360], [361]], [[279], [280], [278], [281]], [[283], [284], [285]], [[362], [363]], [[430], [431]], [[176], [177]], [142], [155], [156], [158], [160], [168], [169], [170], [173], [174], [175], [256], [282], [286], [333], [334], [358], [364], [398], [399], [432]],
        #      '16':[[[171], [172]], [[335], [336]], [[360], [361]], [[176], [177]], [[362], [363]], [[183], [184]], [142], [168], [169], [173], [174], [175], [178], [179], [180], [181], [182], [185], [186], [282], [286], [287], [288], [333], [334], [364], [432]],
        #      '17':[[[183], [184]], [[417], [418]], [[362], [363]], [[176], [177]], [[189], [190]], [[191], [192]], [142], [432], [169], [178], [179], [180], [181], [182], [185], [186], [187], [188], [194], [287], [288], [364], [365], [366], [400]],
        #      '18':[[[189], [190]], [[191], [192]], [[362], [363]], [[183], [184]], [[194], [195]], [[367], [368]], [[196], [197]], [[401], [402]], [[289], [290]], [179], [187], [193], [198], [199], [200], [201], [202],  [263], [291], [365], [366], [400], [433]],
        #      '19':[[[362], [363]], [[191], [192]], [[205], [206]], [[264], [265]], [[208], [209]], [[210], [211]], [[401], [402]], [[189], [190]], [193], [198], [200], [201], [202], [203], [204], [207], [212], [263], [266], [267], [291], [337], [366], [369], [370], [371], [433]]}

        # # ----------------------------------------------------------------------------------------
        # Y = dict()
        # for i in range(model_par.trainingSetSize + model_par.testingSetSize):
        #     while (index_end <= myF.shape[0]) and (myF.iloc[index_end, 0] <= (myF.iloc[index_start, 0] + model_par.window_size * video_par['frame_rate'])):
        #         index_end = index_end + 1

        #     Y[i] = getClustersFromWindow(X[str(i)]['trackid'], dataDirectory)

        # with open(dataDirectory + '/featureY1.json', 'w') as f:
        #     json.dump(Y, f, cls=MyEncoder, indent=4, separators=(',',':'))
        # print("featureY1 -----------------done!\n")
        # # -----------------------------------------------------------------------------------------
        
        # print(np.array(X[0]['myfeatures']))
        # 放弃第三个特征（ganger）
        # if model_par.features == [1, 1, 0, 1]:
        #     for i in range(len(X)):
        #         feature_4 = np.array(X[i]['myfeatures'])
        #         X[i]['myfeatures'] = feature_4[:,[0,1,3]]
        # print(Y[0])
        # [-0.14832234  0.14015189  0.0164408  -0.07455661 -0.19755021  0.09092402 -0.03278706 -0.12378447]
        

        """
        现在已经有了特征 ----------------------------------------------------------------------------
            input data: X 
            output data: Y
        """
        # 特征标准化，找到所有数据四个特征的各自最大值 --------------------------------------
        n_feature = sum(model_par.features)
        mymax = np.zeros((1, n_feature))
        for i in range(model_par.trainingSetSize + model_par.testingSetSize):
            # arrayX = np.abs(np.array(X[str(i)]['myfeatures']))
            arrayX = np.abs(np.array(X[i]['myfeatures']))
            columnMax = np.nanmax(arrayX, axis=0)  # 得到每一列的最大值
            if columnMax.shape[0] > 0:
                merge = np.vstack((mymax, columnMax))
                mymax = np.nanmax(merge, axis=0)
        # print(mymax)
        # mymax = np.array([0.5776,2.2642,0.0553])
        
        # # --------------------------------------------------------------------------------
        
        # 特征标准化 & 创建互补特征 --------------------------------------------------------
        for i in range(model_par.trainingSetSize + model_par.testingSetSize):
            # make them similarity measures between 0 and 1
            # length = np.array(X[str(i)]['myfeatures']).shape[0]
            length = np.array(X[i]['myfeatures']).shape[0]
            if  length > 0:
                mymax_array2D = np.array([mymax for _ in range(length)])
                # X[str(i)]['myfeatures'] = 1 - (np.array(X[str(i)]['myfeatures']) / mymax_array2D)
                X[i]['myfeatures'] = 1 - (np.array(X[i]['myfeatures']) / mymax_array2D)

            # 创建互补的特征，以更好地识别相似阈值
            for j in range(model_par.numberOfFeatures):
                # value = X[str(i)]['myfeatures'][:, j] - 1
                # X[str(i)]['myfeatures'] = np.insert(X[str(i)]['myfeatures'], model_par.numberOfFeatures + j, values=value, axis=1)
                value = X[i]['myfeatures'][:, j] - 1
                X[i]['myfeatures'] = np.insert(X[i]['myfeatures'], model_par.numberOfFeatures + j, values=value, axis=1)
        
        # print(X[0]['couples'].index([21,22]))
        # index = X[0]['couples'].index([21,22])
        # print(X[0]['myfeatures'][index])
        # print(X[0]['couples'].index([22,24]))
        # index = X[0]['couples'].index([22,24])
        # print(X[0]['myfeatures'][index])
        # print(Y[1])
        # print(np.array(X[0]['detectedGroups']).shape)
        print("data: " + dataDirectory + ", training: " + str(model_par.trainingSetSize) + ", testing: " + str(model_par.testingSetSize))
        # # --------------------------------------------------------------------------------
        
        """
        # Training -----------------------------------------------------------------------
        # """
        allSetSize = model_par.testingSetSize + model_par.trainingSetSize
        # testindex = random.sample(range(0,allSetSize),model_par.testingSetSize)
        # testindex = [0,1,2,3,4]
        allindex = [x for x in range(allSetSize)]
        # trainindex = list(set(allindex).difference(set(testindex)))
        # trainindex = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
        # print(testindex, trainindex)
        # X_test = [X[str(i)] for i in allindex]
        # Y_test = [Y[str(i)] for i in allindex]
        # X_train = [X[str(i)] for i in allindex]
        # Y_train = [Y[str(i)] for i in allindex]
        X_test = [X[i] for i in allindex]
        Y_test = [Y[str(i)] for i in allindex]
        X_train = [X[i] for i in allindex]
        Y_train = [Y[str(i)] for i in allindex]

        if model.trainMe:
            print("\nTraining the classifier on the training set:\n")
            modelBCFW_weight= trainPerceptron(X_train, Y_train)
            print("modelBCFW_weight=\n", modelBCFW_weight)
        else:
            # modelBCFW_weight = model.preTrain_w
            # modelBCFW_weight = np.array([[-0.12815193],[ 0.02901785],[ 0.02662733],[ 0.05865231],[-0.1421993 ],[ 0.01497048],[ 0.01257996],[ 0.04460494]])
            # modelBCFW_weight = np.array([[-0.11746883],[ 0.07694488],[ 0.01152641],[-0.04012392],[-0.15165551],[ 0.0427582 ],[-0.02266027],[-0.07431061]])
            # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            # modelBCFW_weight = np.array([[0.24849833],[0.09128355],[-0.07110776],[0.11287341]])
            # modelBCFW_weight = np.array([[0.21745055],[0.26089283],[0.01796708],[0.14768449]])
            # modelBCFW_weight = np.array([[ 0.63003117],[-0.00786649],[-0.00511848],[ 0.17005114]])
            # modelBCFW_weight = np.array( [[ 0.23654525],[ 0.1966749 ],[-0.00677805],[ 0.12175055]])
            # modelBCFW_weight = np.array([[0.63998534],[0.49036008],[0.14217234],[0.34376184]])
            # modelBCFW_weight = np.array([[-0.06092241],[ 0.06045744],[ 0.00934401],[-0.01411255],[-0.09469713],[ 0.02668272],[-0.0244307 ],[-0.04788727]])
            # modelBCFW_weight = np.array([[-0.19702614],[ 0.18490929],[ 0.14150672],[-0.10756406],[-0.33164412],[ 0.05029131],[ 0.00688874],[-0.24218204]])
            # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            # modelBCFW_weight = np.array([[-0.05957466],[-0.03250356],[ 0.01445445],[-0.02000639],[-0.08672905],[-0.05965795],[-0.01269994],[-0.04716078]])
            # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            # modelBCFW_weight = np.array([[-0.05508524],[-0.02863407],[ 0.00828818],[-0.01793417],[ 0.08334105],[ 0.05688988],[ 0.01996764],[ 0.04618999]])
            # 18% delta > 0.15
            modelBCFW_weight = np.array([[-0.1331842 ],[ 0.07847764],[ 0.01151993],[-0.01393907],[-0.1811842 ],[ 0.03047764],[-0.03648007],[-0.06193907]])
            # 19% delta > 0.1
            # modelBCFW_weight = np.array([[-0.13821461],[ 0.11967323],[ 0.02188043],[-0.04908633],[-0.18841661],[ 0.06947123],[-0.02832157],[-0.09928833]])
            print("\nLoad model weight: " + str(modelBCFW_weight.T[0]))

        """
        Testing ----------------------------------------------------------
        """
        if model.testMe:
            print("\nTesting the classifier on the testing set:\n")
            # print(Y_test)
            myY_test, absolute_error_test, p_test, r_test, perf = test_struct_svm(X_test, Y_test, modelBCFW_weight)
            print("myY_test: \n", myY_test)
            print(absolute_error_test)
            print(p_test)
            print(r_test)
            print(perf)
            # output_test = np.round(np.array([absolute_error_test, p_test, r_test])/model_par.testingSetSize*100*100)/100
            output_test = np.round(np.array([absolute_error_test, p_test, r_test])/allSetSize*100*100)/100
            print('Testing error: ',output_test[0], '%% (Precision: ',output_test[1],'%%, Recall: ',output_test[2],'%%)\n')
        else:
            print("\nLoading myY_test:")
            myY_test = {0: [[[213], [214], [215], [216]], [[217], [220]], [[7], [8], [17]], [[75], [76]], [[77], [78]], [[11], [10], [12], [13]], [[19], [20]], [[27], [29]], [[28], [30]], [[9], [273]], [[14], [16]], [1], [2], [3], [4], [5], [6], [15], [18], [21], [22], [23], [24], [25], [26], [31], [73], [74], [218], [219], [274], [409]], 
                        1: [[[217], [220]], [[31], [32]], [[80], [81]], [[35], [36]], [[14], [16]], [[419], [420]], [[33], [34]], [[28], [30]], [[77], [78]], [[10], [12], [13]], [[27], [29]], [[19], [20]], [3], [4], [5], [7], [8], [9], [11], [17], [23], [24], [25], [26], [37], [73], [74], [75], [76], [79], [82], [83], [219], [315], [410], [411]], 
                        2: [[[35], [36]], [[217], [220], [219]], [[87], [232], [233]], [[33], [34]], [[80], [81]], [[19], [20], [27], [29]], [[77], [78]], [[10], [11], [12], [13], [76]], [[82], [84], [85]], [[303], [304]], [[28], [30]], [[40], [302]], [[44], [45]], [[38], [39]], [[4], [75]], [[300], [301]], [37], [41], [42], [43], [74], [79], [83], [86], [221], [222], [223], [305], [315], [316], [317], [410], [411]], 
                        3: [[[232], [233], [234]], [[222], [340]], [[92], [93], [94], [95]], [[89], [90]], [[228], [318], [319]], [[306], [307], [312]], [[316], [317]], [[229], [230]], [[217], [219], [220]], [[4], [75]], [[38], [39]], [[300], [301]], [[48], [49]], [[82], [84], [85]], [[225], [223], [224], [226]], [[45], [46], [47]], [[308], [309]], [[303], [304]], [37], [40], [41], [42], [43], [44], [50], [51], [80], [83], [86], [87], [88], [91], [221], [227], [235], [275], [302], [341], [410], [411]], 
                        4: [[[232], [233]], [[300], [318], [319]], [[52], [53], [54], [55], [56]], [[222], [340]], [[91], [221]], [[42], [44]], [[310], [312]], [[38], [39]], [[88], [316]], [[89], [90], [92], [93]], [[94], [95]], [[229], [230]], [[223], [226], [224]], [[48], [49]], [[4], [75]], [[308], [309]], [[45], [46], [47]], [50], [51], [57], [83], [87], [96], [225], [227], [228], [231], [234], [235], [301], [311], [313], [317], [341], [342], [343], [344], [376]], 
                        5: [[[55], [56], [57]], [[93], [313]], [[52], [53]], [[89], [90]], [[60], [61]], [[222], [340], [343]], [[58], [59]], [[232], [233]], [[45], [46], [47]], [[98], [99]], [50], [51], [54], [72], [87], [92], [94], [95], [96], [97], [100], [101], [102], [225], [228], [229], [230], [231], [311], [341], [342], [344], [376], [412]], 
                        6: [[[423], [426]], [[236], [237]], [[421], [422]], [[58], [59], [412], [413], [414]], [[62], [63], [64], [65], [66]], [[60], [61]], [[72], [103]], [[222], [340], [343]], [[424], [425]], [[348], [349]], [[55], [56]], [[345], [346]], [[98], [99]], [[68], [69]], [51], [57], [67], [96], [100], [101], [102], [104], [231], [232], [233], [347], [376]], 
                        7: [[[350], [351]], [[111], [112]], [[222], [340], [343]], [[421], [422]], [[108], [109]], [[62], [63]], [[106], [107]], [[98], [99]], [[64], [65], [66]], [[70], [71]], [[72], [103]], [[345], [346]], [[240], [241]], [[68], [69]], [51], [67], [104], [105], [110], [113], [232], [233], [236], [237], [238], [239], [242], [243], [276], [314], [320], [347], [352], [353], [376], [413], [423], [424], [425], [426]], 
                        8: [[[104], [425]], [[70], [71], [108], [109]], [[115], [114], [116]], [[106], [107]], [[422], [421], [67], [423], [426]], [[64], [65], [66], [111]], [[350], [352], [351], [353]], [[118], [119]], [[246], [247]], [[232], [233], [238]], [[378], [379]], [[244], [245]], [[120], [121]], [[428], [429]], [[345], [346]], [72], [103], [110], [112], [113], [117], [122], [123], [124], [236], [237], [242], [243], [320], [321], [322], [323], [376], [377], [427]], 
                        9: [[[137], [138], [139]], [[127], [130], [133], [132]], [[128], [129], [134]], [[125], [126]], [[114], [115], [116], [117]], [[244], [245]], [[381], [382], [383]], [[378], [379]], [[121], [123]], [[232], [233], [238]], [[251], [252]], [[118], [119]], [72], [103], [110], [120], [122], [124], [131], [135], [136], [243], [246], [247], [248], [249], [250], [321], [322], [323], [324], [325], [376], [377], [380], [384], [385], [386]], 
                        10: [[[127], [128], [130], [133], [132]], [[122], [131], [124]], [[251], [252]], [[125], [126], [246], [247]], [[137], [138]], [[140], [141]], [[324], [325]], [[257], [258]], [[232], [233]], [[121], [123]], [[382], [383]], [[115], [116]], [[244], [245]], [[143], [144]], [129], [134], [135], [136], [139], [142], [238], [243], [248], [249], [250], [253], [254], [255], [256], [277], [321], [322], [323], [326], [327], [376], [384], [386]], 
                        11: [[[127], [134], [128]], [[144], [277]], [[148], [149]], [[129], [130], [132], [133]], [[121], [123]], [[140], [141]], [[356], [357]], [[146], [147]], [[137], [138]], [[324], [325]], [[253], [254]], [142], [143], [145], [232], [233], [238], [248], [249], [256], [257], [258], [259], [326], [327], [328], [354], [355], [376], [386], [387]], 
                        12: [[[390], [391], [392]], [[150], [151]], [[356], [357]], [[148], [149]], [[156], [157]], [[330], [331], [332]], [[146], [147]], [[232], [354], [355], [238]], [[153], [154]], [[387], [388]], [[326], [327]], [[324], [325]], [142], [143], [144], [145], [152], [155], [233], [248], [249], [254], [256], [259], [260], [261], [277], [328], [329], [376], [389], [393]], 
                        13: [[[157], [393], [395]], [[156], [158]], [[256], [261]], [[233], [232], [238]], [[329], [332], [331]], [[152], [153], [154]], [[358], [359]], [[354], [355], [391], [392]], [[150], [151]], [[162], [163], [164]], [[415], [416]], [[248], [249]], [142], [155], [159], [160], [161], [259], [260], [330], [334], [376], [394], [396], [397]], 
                        14: [[[156], [158]], [[169], [170]], [[163], [164]], [[248], [249]], [[165], [166]], [[360], [361]], [[329], [331], [332]], [[280], [281]], [142], [155], [159], [160], [161], [162], [167], [168], [256], [259], [260], [262], [278], [279], [282], [333], [334], [335], [336], [358], [359], [393], [396], [397], [398], [399]], 
                        15: [[[165], [167], [166]], [[430], [431]], [[171], [172]], [[360], [361]], [[329], [331], [332]], [[283], [284], [285]], [[279], [280], [278], [281]], [[335], [336]], [[176], [177]], [[358], [398]], [[160], [399]], [[362], [363]], [142], [155], [156], [158], [168], [169], [170], [173], [174], [175], [256], [282], [286], [333], [334], [364], [432]], 
                        16: [[[362], [363], [364]], [[360], [361]], [[171], [172]], [[142], [432]], [[183], [184], [186]], [[176], [177]], [[335], [336]], [168], [169], [173], [174], [175], [178], [179], [180], [181], [182], [185], [282], [286], [287], [288], [333], [334]], 
                        17: [[[189], [190]], [[183], [184]], [[417], [418]], [[191], [192]], [[362], [363]], [[176], [177]], [[142], [432]], [169], [178], [179], [180], [181], [182], [185], [186], [187], [188], [194], [287], [288], [364], [365], [366], [400]], 
                        18: [[[193], [263]], [[196], [197]], [[289], [290]], [[367], [368]], [[191], [192]], [[183], [184]], [[401], [402]], [[362], [363]], [[194], [195]], [179], [187], [189], [190], [198], [199], [200], [201], [202], [291], [365], [366], [400], [433]], 
                        19: [[[191], [192], [362], [363]], [[401], [402]], [[210], [211]], [[205], [206]], [[264], [265]], [[208], [209]], [[189], [190]], [193], [198], [200], [201], [202], [203], [204], [207], [212], [263], [266], [267], [291], [337], [366], [369], [370], [371], [433]]}
            
        if model_par.display:
            showCluster(myF, Y_test, myY_test, model_par, video_par, dataDirectory)
